#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) Duncan Macleod (2013)
#
# This file is part of GWpyDataViewer.
#
# GWpyDataViewer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GWpyDataViewer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GWpyDataViewer.  If not, see <http://www.gnu.org/licenses/>.

"""Start a new monitor using the GWpy DataViewer toolkit.

Monitors should be configured in INI-format.
"""

from argparse import ArgumentParser

from matplotlib.pyplot import switch_backend
from matplotlib import rcParams

from dataviewer import from_ini
from dataviewer import version

__version__ = version.version
__author__ = 'Duncan Macleod <duncan.macleod@ligo.org>'

parser = ArgumentParser(description=__doc__)
parser.add_argument('-v', '--verbose', action='count', default=2,
                    help='increase verbose output')
parser.add_argument('-V', '--version', action='version',
                    help='show version number and exit')
parser.version = __version__
parser.add_argument('configuration', action='store', type=str,
                    nargs='+', help='Path to configuration file for monitor')
parser.add_argument('-n', '--non-interactive', action='store_true',
                    default=False,
                    help='Process monitor without displaying to screen, '
                         'default %(default)s')
parser.add_argument('-b', '--back-fill', action='store_true', default=False,
                    help='Fetch old data to back-fill the plot, '
                         'default: %(default)s')
parser.add_argument('-t', '--no-latex', action='store_true', default=False,
                    help="Don't use latex to render text, default: %(default)s")

args = parser.parse_args()

args.verbose = max(5 - args.verbose, 0)
args.verbose *= 10

if args.non_interactive:
    switch_backend('agg')
if args.no_latex:
    rcParams['text.usetex'] = False

mon = from_ini(args.configuration)
mon.logger.setLevel(args.verbose)
try:  # todo: put all the logger of all the monitors to the level?
    mon.buffer.logger.setLevel(args.verbose)
    mon.spectrograms.logger.setLevel(args.verbose)
except AttributeError:
    pass
try:
    if args.back_fill:
        mon.backfill()
    mon.run(interactive=not args.non_interactive)
except KeyboardInterrupt:
    mon.logger.debug('Ctrl-c detected, monitor will exit.')
except Exception:
    if args.non_interactive:
        mon._fig.close()
    raise
